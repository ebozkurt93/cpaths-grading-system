# timestamp: Mon Oct 01 2018 13:03:47 GMT+0300 (TÃ¼rkiye Standart Saati)

type AggregateApplication {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Application implements Node {
  id: ID!
  user: User!
  otherinfo1: String!
  gpa: Float!
}

"""
A connection to a list of items.
"""
type ApplicationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [ApplicationEdge]!
  aggregate: AggregateApplication!
}

input ApplicationCreateInput {
  otherinfo1: String!
  gpa: Float!
  user: UserCreateOneWithoutApplicationInput!
}

input ApplicationCreateOneWithoutUserInput {
  create: ApplicationCreateWithoutUserInput
  connect: ApplicationWhereUniqueInput
}

input ApplicationCreateWithoutUserInput {
  otherinfo1: String!
  gpa: Float!
}

"""
An edge in a connection.
"""
type ApplicationEdge {
  """
  The item at the end of the edge.
  """
  node: Application!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ApplicationOrderByInput {
  id_ASC
  id_DESC
  otherinfo1_ASC
  otherinfo1_DESC
  gpa_ASC
  gpa_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ApplicationPreviousValues {
  id: ID!
  otherinfo1: String!
  gpa: Float!
}

type ApplicationSubscriptionPayload {
  mutation: MutationType!
  node: Application
  updatedFields: [String!]
  previousValues: ApplicationPreviousValues
}

input ApplicationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ApplicationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ApplicationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ApplicationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ApplicationWhereInput
}

input ApplicationUpdateInput {
  otherinfo1: String
  gpa: Float
  user: UserUpdateOneRequiredWithoutApplicationInput
}

input ApplicationUpdateOneWithoutUserInput {
  create: ApplicationCreateWithoutUserInput
  connect: ApplicationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ApplicationUpdateWithoutUserDataInput
  upsert: ApplicationUpsertWithoutUserInput
}

input ApplicationUpdateWithoutUserDataInput {
  otherinfo1: String
  gpa: Float
}

input ApplicationUpsertWithoutUserInput {
  update: ApplicationUpdateWithoutUserDataInput!
  create: ApplicationCreateWithoutUserInput!
}

input ApplicationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ApplicationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [ApplicationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [ApplicationWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  otherinfo1: String

  """
  All values that are not equal to given value.
  """
  otherinfo1_not: String

  """
  All values that are contained in given list.
  """
  otherinfo1_in: [String!]

  """
  All values that are not contained in given list.
  """
  otherinfo1_not_in: [String!]

  """
  All values less than the given value.
  """
  otherinfo1_lt: String

  """
  All values less than or equal the given value.
  """
  otherinfo1_lte: String

  """
  All values greater than the given value.
  """
  otherinfo1_gt: String

  """
  All values greater than or equal the given value.
  """
  otherinfo1_gte: String

  """
  All values containing the given string.
  """
  otherinfo1_contains: String

  """
  All values not containing the given string.
  """
  otherinfo1_not_contains: String

  """
  All values starting with the given string.
  """
  otherinfo1_starts_with: String

  """
  All values not starting with the given string.
  """
  otherinfo1_not_starts_with: String

  """
  All values ending with the given string.
  """
  otherinfo1_ends_with: String

  """
  All values not ending with the given string.
  """
  otherinfo1_not_ends_with: String
  gpa: Float

  """
  All values that are not equal to given value.
  """
  gpa_not: Float

  """
  All values that are contained in given list.
  """
  gpa_in: [Float!]

  """
  All values that are not contained in given list.
  """
  gpa_not_in: [Float!]

  """
  All values less than the given value.
  """
  gpa_lt: Float

  """
  All values less than or equal the given value.
  """
  gpa_lte: Float

  """
  All values greater than the given value.
  """
  gpa_gt: Float

  """
  All values greater than or equal the given value.
  """
  gpa_gte: Float
  user: UserWhereInput
}

input ApplicationWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createApplication(data: ApplicationCreateInput!): Application!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateApplication(
    data: ApplicationUpdateInput!
    where: ApplicationWhereUniqueInput!
  ): Application
  deleteUser(where: UserWhereUniqueInput!): User
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  upsertApplication(
    where: ApplicationWhereUniqueInput!
    create: ApplicationCreateInput!
    update: ApplicationUpdateInput!
  ): Application!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyApplications(
    data: ApplicationUpdateInput!
    where: ApplicationWhereInput
  ): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyApplications(where: ApplicationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  DEMO
}

type Query {
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  applications(
    where: ApplicationWhereInput
    orderBy: ApplicationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Application]!
  user(where: UserWhereUniqueInput!): User
  application(where: ApplicationWhereUniqueInput!): Application
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  applicationsConnection(
    where: ApplicationWhereInput
    orderBy: ApplicationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ApplicationConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  application(
    where: ApplicationSubscriptionWhereInput
  ): ApplicationSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  application: Application
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  application: ApplicationCreateOneWithoutUserInput
}

input UserCreateOneWithoutApplicationInput {
  create: UserCreateWithoutApplicationInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutApplicationInput {
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  application: ApplicationUpdateOneWithoutUserInput
}

input UserUpdateOneRequiredWithoutApplicationInput {
  create: UserCreateWithoutApplicationInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutApplicationDataInput
  upsert: UserUpsertWithoutApplicationInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutApplicationDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutApplicationInput {
  update: UserUpdateWithoutApplicationDataInput!
  create: UserCreateWithoutApplicationInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UserWhereInput!]
  id: ID

  """
  All values that are not equal to given value.
  """
  id_not: ID

  """
  All values that are contained in given list.
  """
  id_in: [ID!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]

  """
  All values less than the given value.
  """
  id_lt: ID

  """
  All values less than or equal the given value.
  """
  id_lte: ID

  """
  All values greater than the given value.
  """
  id_gt: ID

  """
  All values greater than or equal the given value.
  """
  id_gte: ID

  """
  All values containing the given string.
  """
  id_contains: ID

  """
  All values not containing the given string.
  """
  id_not_contains: ID

  """
  All values starting with the given string.
  """
  id_starts_with: ID

  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID

  """
  All values ending with the given string.
  """
  id_ends_with: ID

  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  name: String

  """
  All values that are not equal to given value.
  """
  name_not: String

  """
  All values that are contained in given list.
  """
  name_in: [String!]

  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]

  """
  All values less than the given value.
  """
  name_lt: String

  """
  All values less than or equal the given value.
  """
  name_lte: String

  """
  All values greater than the given value.
  """
  name_gt: String

  """
  All values greater than or equal the given value.
  """
  name_gte: String

  """
  All values containing the given string.
  """
  name_contains: String

  """
  All values not containing the given string.
  """
  name_not_contains: String

  """
  All values starting with the given string.
  """
  name_starts_with: String

  """
  All values not starting with the given string.
  """
  name_not_starts_with: String

  """
  All values ending with the given string.
  """
  name_ends_with: String

  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  resetToken: String

  """
  All values that are not equal to given value.
  """
  resetToken_not: String

  """
  All values that are contained in given list.
  """
  resetToken_in: [String!]

  """
  All values that are not contained in given list.
  """
  resetToken_not_in: [String!]

  """
  All values less than the given value.
  """
  resetToken_lt: String

  """
  All values less than or equal the given value.
  """
  resetToken_lte: String

  """
  All values greater than the given value.
  """
  resetToken_gt: String

  """
  All values greater than or equal the given value.
  """
  resetToken_gte: String

  """
  All values containing the given string.
  """
  resetToken_contains: String

  """
  All values not containing the given string.
  """
  resetToken_not_contains: String

  """
  All values starting with the given string.
  """
  resetToken_starts_with: String

  """
  All values not starting with the given string.
  """
  resetToken_not_starts_with: String

  """
  All values ending with the given string.
  """
  resetToken_ends_with: String

  """
  All values not ending with the given string.
  """
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """
  All values that are not equal to given value.
  """
  resetTokenExpiry_not: Float

  """
  All values that are contained in given list.
  """
  resetTokenExpiry_in: [Float!]

  """
  All values that are not contained in given list.
  """
  resetTokenExpiry_not_in: [Float!]

  """
  All values less than the given value.
  """
  resetTokenExpiry_lt: Float

  """
  All values less than or equal the given value.
  """
  resetTokenExpiry_lte: Float

  """
  All values greater than the given value.
  """
  resetTokenExpiry_gt: Float

  """
  All values greater than or equal the given value.
  """
  resetTokenExpiry_gte: Float
  application: ApplicationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
