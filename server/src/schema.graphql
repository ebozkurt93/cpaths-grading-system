# import * from './generated/prisma.graphql'

# this is needed for upload to work
scalar Upload

type SuccessMessage {
  message: String
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}

type InitialForm {
  id: ID!
  email: String!
  name: String!
  lastname: String!
  university: String!
  universityYear: String!
  universityDept: String!
  gpa: Float!
  cv: String!
  cvAnon: String!
  transcript: String!
  transcriptAnon: String!
  internshipCountry: String!
  internshipType: String!
  companyName: String!
  internshipPeriod: String!
  internshipPosition: String!
  acceptanceLetter: String!
  acceptanceEmail: String!
  economicSupport: String!
  longQuestion1: String!
  longQuestion2: String!
  longQuestion3: String!
  ourPrograms: String!
  aboutUs: String!
  invalid: Boolean!
  notes: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Mutation {
  registerApplication(
    email: String!
    name: String!
    lastname: String!
    university: String!
    universityYear: String!
    universityDept: String!
    gpa: Float!
    cv: Upload
    cvAnon: Upload
    transcript: Upload
    transcriptAnon: Upload
    internshipCountry: String!
    internshipType: String!
    companyName: String!
    internshipPeriod: String!
    internshipPosition: String!
    acceptanceLetter: Upload
    acceptanceEmail: String!
    economicSupport: String!
    longQuestion1: String!
    longQuestion2: String!
    longQuestion3: String!
    ourPrograms: String!
    aboutUs: String!
    token: String
  ): SuccessMessage
  logout: SuccessMessage
  editYourPermissions(permissions: [Permission]): User
  submitFormGrade(
    initialFormId: ID!
    score1: Int!
    score2: Int!
    score3: Int!
    boolean: Boolean!
    notes: String
  ): SuccessMessage
  updateInvalidState(value: String!): SuccessMessage
  updateUserPermissions(permissions: [Permission], userId: ID!): User
  requestInitialFormEdit(email: String!): SuccessMessage
  updateInitialFormNote(initialFormId: ID!, notes: String): SuccessMessage
}

type Query {
  forms: [InitialForm]!
  form(id: ID): InitialForm
  formByToken(token: String): InitialForm
  me: User
  formGrades: [FormGrade]!
  formGradeForInitialForm(initialFormId: ID): FormGrade
  users: [User]!
  results: String
  #   applications: [Application]!
}
